
This is a readme about QEMU, a type-II hypervisor that works great on Linux.
As an hypervisor, QEMU is designed to emulate a bare machine, that is, create
the illusion of a real physical machine, but in software. Qemu can emulate
many target machines, with different processors and different devices.
You can have a list of machines as follows:

	$ qemu-system-arm -machine help
	...
	realview-eb          ARM RealView Emulation Baseboard (ARM926EJ-S)
	vexpress-a9          ARM Versatile Express for Cortex-A9
	...
	
A machine is essentially about a preset hardware configuration.
Indeed, Qemu is about simulating a computer, so the configuration of Qemu is 
mostly about what hardware is simulated:

       - processor type and number of cores
       - amount of memory
       - disks, either ide or scsi disks for example
       - cdrom
       - serial lines
       - display, if any
       - buses, like ISA or PCI bus
       - etc.

By choosing qemu-system-i386, you are opting for a i386-based computer.
By choosing qemu-system-arm, you are opting for an ARM-based computer.
For this simple project, the software has been written 
for the ARM RealView Emulation Baseboard (ARM926EJ-S).

You can let the original choice for the CPU or you can choose a different
ARM processor. To know your options, you can issue the following command:

	$ qemu-system-arm -machine versatilepb -cpu help
	Available CPUs:
  	arm1026
  	arm1136
  	arm1136-r2
  	arm1176
	arm11mpcore
  	arm926
  	arm946
	cortex-a15
  	cortex-a8
  	cortex-a9
  	cortex-m3
	...
	
We will keep the default CPU for the VersatilePB board, 
so there is no need to specify a specific CPU. 

----------------------------------------------------
Specifying the amount of memory on the virtual board
----------------------------------------------------
Default is 128M.
 
   $ qemu-system-i386 -m 64M

   $ qemu-system-arm -machine versatilepb -m 1M

----------------------------------------------------
Disks
----------------------------------------------------

To boot qemu from a CD-ROM, with a hard disk (hda) and forcing the boot order to 
be the cdrom first (order=d) and then the disk (order=bc) with d for cdrom and 
c for hard disk. If you add the menu=on option, you will be able to choose 
from which device to boot from.

  DISKS="-cdrom livecd.iso -hda hda.img -boot order=dc,menu=on"

To boot from a hard disk, without a cdrom.
Booting from the hard disk is the default behavior.
This tells qemu that the "hard disk" contents will be in file hda.img on the host file system.
This disk should appear as device /dev/hda in the guest GNU/Linux OS

  DISKS="-hda hda.img"

For your information, instead of -cdrom you can use:

   $ qemu -drive file=hda.img,index=2,media=cdrom

Or even a more precise version, specifying the disk as an ide:

   $ qemu -drive file=hda.img,if=ide,index=0,media=disk
   $ qemu -drive file=hda.img,if=ide,index=1,media=disk

Or even a more precise version, with specifying some details
on the device itself:

   $ qemu -device ide-hd,drive=c0 -drive file=hda.img,id=c0,if=none

The above lines tell you that your disk is by default an IDE disk.
You can connect a SCSI disk with unit ID 6 on the bus #0:

   $ qemu -drive file=file,if=scsi,bus=0,unit=6

To more information about device types and all, ask qemu itself:

     $ qemu-system-i386 --help
     ...
     $ qemu-system-i386 -device help
     ...
     $ qemu-system-i386 -device ide-hd,help
     ...
     
----------------------------------------------------
Display
----------------------------------------------------

To not have any display, 

   $ qemu-system-i386 -nographic

To have a vga screen:

   $ qemu-system-i386 -vga std

You also can choose a keyboard layout.
Default is -k en-us, but for french keyboard, you may use -k fr

   $ qemu-system-i386 -k en-us
   $ qemu-system-i386 -k fr

Of course, you can equally choose your mouse and other small devices.

--------------------------------------------------------------------
QEMU Monitor Console
--------------------------------------------------------------------
Qemu provides you with an administrative console, called the monitor
console. A typical way to have it is to configure it on the stdio serial
line, which you are likely to have in all configurations.

	$ qemu-system-i386 -serial mon:stdio -hda hda.img

This is a very standard configuration, with one serial line and 
one IDE disk. Notice that "-serial mon:stdio" as opposed to 
the regular "-serial stdio". 

From the terminal window, once Qemu is running, you can access the
monitor console by typing "C-a c", getting the (qemu) prompt.

   (qemu) help

will provide you with a detailed help of the Qemu console commands.


--------------------------------------------------------------------
Create a Qemu disk in a file
--------------------------------------------------------------------

Create a QEMU disk, which is equivalent to create a real disk.
Of course, start with reading the help.

  $ qemu-img --help
    ... valuable read...
  $ qemu-img create -f raw hda.img 128M

Option: -f raw 
        raw is the default disk image format for QEMU.
        it is a byte-for-byte image of a real disk.

--------------------------------------------------------------------
Mounting an raw image on the host:
--------------------------------------------------------------------

Sometimes it is helpful to be able to mount a drive image under the host system. 
For example, if the guest does not have network support, 
the only way to transfer files into and out of the guest will be by  
the storage devices it can address.


Linux and other Unix-like hosts can mount images created with the raw format type 
using a loopback device. But you need to know the start offset of the partition you
wish to mount:

  $ fdisk hda.img
  Command (m for help): p

  Disk hda.img: 134 MB, 134217728 bytes
  144 heads, 17 sectors/track, 107 cylinders, total 262144 sectors
  Units = sectors of 1 * 512 = 512 bytes
  Sector size (logical/physical): 512 bytes / 512 bytes
  I/O size (minimum/optimal): 512 bytes / 512 bytes
  Disk identifier: 0x000a29f6

    Device Boot      Start         End      Blocks   Id  System
  hda.img1   *           1      250000      125000   83  Linux

  Command (m for help): q
  $
 
From a root login (or using sudo), mount a loopback with an offset of 32,256.
Note: if you have an image without partitions you should omit the ",offset=..." part. 
Note: notice the start is at the first sector, so the offset=1*512

  $ sudo mkdir -p /mnt/hda
  $ sudo mount -o loop,offset=$((1*512)) hda.img /mnt/hda
  $ cp you-file /mnt/hda
  $ umount /mnt/hda


--------------------------------------------------------------------
    WARNING --- WARNING --- WARNING --- WARNING 
--------------------------------------------------------------------
It is essential that you understand the relationship between 
your Qemu configuration and your kernel configuration.
Remember, Qemu emulates a real machine, so the machine that your
software will "see" will depend on the configuration of QEMU.

For example, if you do not configure any disk, QEMU will not be
able to boot from one. If you do not configure a serial line, 
your software will not detect one. 

This means that you need to setup QEMU as you see fit and then
make sure your software is setup accordingly, with the proper
support for the hardware devices you selected for QEMU to emulate.

For instance, let's consider a disk. A hard disk is typically
a block-oriented device. The disk device is connected on a bus,
for instance an ISA (legacy) bus or a more modern PCI bus. 
If it is the case, the kernel must have support for the PCI bus, 
otherwise, any device on that bus would be invisible to the kernel. 

If the kernel "sees" the PCI bus, it must have the support for 
the type of disk you chose. A disk could have different types
of controllers, often called interface. Old disks would be IDE
disks, more modern disk would be SCSI. SATA disks are a kind
of SCSI disks. This means your kernel would need support for
the right kind of controller, either IDE or SCSI. 

Sometimes, Qemu can be a little tricky to setup, from a configuration
standpoint. Some configurations are forbidden and Qemu refuses
to start. Those are the easy cases. In some cases, you ask for 
something, and Qemu chooses something else, silently.
And this is really annoying in our case, because, since we
are building a specialized kernel, not a generic one, 
we must know exactly what hardware is simulated by Qemu.

For instance, the Qemu documentation clearly states that
the following command will give a IDE hard disk, using
the file hda.img as the storage.

    $ qemu-system-i386 -hda hda.img

And it does as said, as long as we do not add a cdrom.

    $ qemu-system-i386 -hda hda.img -cdrom livecd.iso

If we do, then everything turns out to be SCSI now, 
even though the documentation says that both these 
line should result in both the disk and the cdrom
to be IDE devices... Hum... I guess we cannot ask 
to much when we are asking for legacy devices...

To have a lot of information on the hardware configuration,
ultimately chosen by Qemu, you can use the Qemu monitor console
(see above to know how to activate the monitor on stdio serial
line) and you can ask Qemu to dump the hardware configuration:

    (qemu) info qtree
    ...
    irq 0
    bus: pci.0
      ...
      dev: piix3-ide, id ""
        addr = 01.1
        romfile = ""
        rombar = 1 (0x1)
        multifunction = false
        command_serr_enable = true
        class IDE controller, addr 00:01.1, pci id 8086:7010 (sub 1af4:1100)
        bar 4: i/o at 0xc040 [0xc04f]
        bus: ide.1
          type IDE
          dev: ide-cd, id ""
            drive = "ide1-cd0"
            logical_block_size = 512 (0x200)
            physical_block_size = 512 (0x200)
            min_io_size = 0 (0)
            opt_io_size = 0 (0)
            bootindex = -1 (0xffffffffffffffff)
            discard_granularity = 512 (0x200)
            ver = "2.0.0"
            wwn = 0 (0)
            serial = "QM00003"
            model = ""
            unit = 0 (0)
        bus: ide.0
          type IDE
          dev: ide-hd, id ""
            drive = "ide0-hd0"
            logical_block_size = 512 (0x200)
            physical_block_size = 512 (0x200)
            min_io_size = 0 (0)
            opt_io_size = 0 (0)
            bootindex = -1 (0xffffffffffffffff)
            discard_granularity = 512 (0x200)
            ver = "2.0.0"
            wwn = 0 (0)
            serial = "QM00001"
            model = ""
            cyls = 2 (0x2)
            heads = 16 (0x10)
            secs = 63 (0x3f)
            bios-chs-trans = "none"
            unit = 0 (0)
 
This tells you that you have a PCI bus, with a piix3 controller
for your IDE disks. It gives you the mmio address for the controller
(bar 4: i/o at 0xc040 [0xc04f]). It also tells you that you have 
a CD-ROM (ide.1) and a hard disk (ide.0).


--------------------------------------------------------------------
Debugging with QEMU:
--------------------------------------------------------------------

To have GDB debugging

    GDB="-S -s"

    $ qemu-system-i386 -S -s

or even better:
 
    $ qemu-system-i386 -gdb tcp::1234 -S

The -S option forces qemu to stop upon starting 
allowing you to attach gdb. The tcp::1234 indicates
that you will attach on the port 1234.

  $ gdb
  (gdb) target remote localhost:1234
  Remote debugging using localhost:1234
  0x0000fff0 in ?? ()
  (gdb) file your-elf-file-with-debug-info
  ...
  (gdb) br your-breakpoint
  ...
  (gdb) cont
  Continuing.


--------------------------------------------------------------------
Configuring the network:
--------------------------------------------------------------------

See http://en.wikibooks.org/wiki/QEMU/Networking
The following three ways to start qemu are equivalent:

 $ qemu -m 256 -hda disk.img &
 $ qemu -m 256 -hda disk.img -net nic -net user &
 $ qemu-system-i386 -m 256 -hda disk.img -netdev user,id=network0 -device e1000,netdev=network0 &

By default, the device is e1000. 

WARNING: in this case, you only have a TCP/UDP tunnel set up... so you can reach 
the Internet, but you cannot ping. Also, the incoming traffic is filtered out
by Qemu, acting as a firewall.

For a nicer setting, we will use a TAP and not a TUN. You will still have 
to setup your network through ifconfig, but the setting has changed.
In your guest, you will use:

   ip addr: 192.168.100.2
   gateway: 192.168.100.1
   dns: 8.8.8.8

If you create launch qemu this way:

    $ qemu-system-i386 -net nic -net tap,ifname=tap0,script=no 

And you created before launching qemu the following TAP:

    $ tunctl -u your-user-name -t tap0
    $ ifconfig tap0 192.168.100.1 up

And configured NAT as root on the host:

    $ echo 1 > /proc/sys/net/ipv4/ip_forward
    $ iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
    $ iptables -I FORWARD 1 -i tap0 -j ACCEPT
    $ iptables -I FORWARD 1 -o tap0 -m state --state RELATED,ESTABLISHED -j ACCEPT

You should be able to ping both ways:

    host$ ping 192.168.100.2
    	  ...
    guest$ ping 192.168.100.1
    	   ...
And of course ping other sites on the Internet.

But only if your kernel has the necessary software capabilities:

	- a e1000 driver
	- a minimal Ethernet/IP network stack, such as LWIP (Light-Weight IP)

